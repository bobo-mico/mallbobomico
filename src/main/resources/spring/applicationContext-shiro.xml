<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 扫描包可以消除报红 -->
    <context:component-scan base-package="com.bobomico.observer" annotation-config="true" />
    <context:component-scan base-package="com.bobomico.shiro.cachemanager2" annotation-config="true" />

    <!-- 过滤器 -->
    <!-- web.xml中shiro的filter对应的bean -->
    <!-- ShiroFilterFactoryBean是一个工厂bean 真正的filter在下面 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 安全管理器 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 登录地址 可以不存在 一切行为在过滤器中完成 默认为 /login.jsp -->
        <property name="loginUrl" value="/user/login.do" />
        <!-- 权限拦截 拒绝访问 我们做了json处理 所以不用设置也没关系 -->
        <property name="unauthorizedUrl" value="/index.html" />
        <!-- 认证成功统一跳转到first.action，但不建议配置，默认是shiro认证成功自动到上一个请求路径会更加合理 -->
        <!--<property name="successUrl" value="/first.action"/>-->

        <!-- 自定义过滤器链 -->
        <property name="filters">
            <map>
                <entry key="authc">
                    <bean class="com.bobomico.shiro.filter.JsonDataFormAuthenticationFilter" />
                </entry>
                <entry key="perms">
                    <bean class="com.bobomico.shiro.filter.JsonDataPermissionsAuthorizationFilter" />
                </entry>
                <entry key="logout">
                    <bean class="com.bobomico.shiro.filter.JsonDataLogoutFilter" />
                </entry>
            </map>
        </property>

        <!-- filter-chain 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 静态资源 -->
                /assets/** = anon
                /images/** = anon
                /dist/** = anon
                /js/** = anon
                /styles/** = anon
                /css/** = anon

                <!-- 缓存测试 -->
                /ehcache/*.do = anon

                <!-- 首页 -->
                /index.jsp = anon

                <!-- 注册 -->
                /api/account/register.do = anon

                <!-- 注销 -->
                /user/logout.do = logout

                <!-- 注册时检查用户名是否存在 -->
                /user/check_valid.do = anon

                /** = authc

                <!-- 授权 -->
                <!-- /api/account/resetPassword.do = perms[user:create] -->
            </value>
        </property>
    </bean>

    <!-- 以下配置已按顺序进行排列 -->
    <!-- 安全管理器 -->
    <!-- 二期 DefaultSecurityManager及DefaultWebSecurityManager都继承了SessionsSecurityManager -->
    <!-- session的管理由DefaultSecurityManager或DefaultWebSecurityManager中的SessionManager来负责 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 认证器 放在realm定义之前 否则realm为null -->
        <property name="authenticator" ref="customModularRealmAuthenticator"></property>
        <!-- realm chain -->
        <property name="realms">
            <list>
                <ref bean="emailRealm" />
                <ref bean="userPassRealm" />
            </list>
        </property>
        <!-- 缓存管理器 - EhCache 如果不适用缓存管理器 只要碰到需要权限就会调用realm 一次访问可能调用n次 -->
<!--         <property name="cacheManager" ref="ehCacheManager"/>-->
        <!-- 缓存管理器 - Redis -->
        <property name="cacheManager" ref="customCacheManager"/>
        <!-- session管理器 务必保证session管理器中使用的缓存技术与安全管理器中配置的缓存技术一致 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 认证器 -->
    <bean id="customModularRealmAuthenticator" class="com.bobomico.shiro.authenticator.CustomModularRealmAuthenticator">
        <!-- 认证策略 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
            <!-- AtLeastOneSuccessfulStrategy 只要一个或更多realm验证成功 那么认证将视为成功 -->
            <!-- FirstSuccessfulStrategy 第一个realm验证成功 整体认证被视为成功 且后续realm被忽略 -->
            <!-- AllSuccessfulStrategy 所有realm成功 认证才视为成功 -->
            <!-- <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean> -->
        </property>
    </bean>

    <!-- Realm -->
    <bean id="emailRealm" class="com.bobomico.shiro.realm.EmailRealm">
        <!-- 凭证匹配器 其中有关于加密算法和加密次数等重要信息 -->
        <property name="credentialsMatcher" ref="retryLimitHashedCredentialsMatcher"/>
        <property name="cachingEnabled" value="true" />
        <property name="authenticationCachingEnabled" value="true" />
        <property name="authenticationCacheName" value="authenticationCache" />
        <property name="authorizationCachingEnabled" value="true" />
        <property name="authorizationCacheName" value="authorizationCache" />
    </bean>
    <bean id="userPassRealm" class="com.bobomico.shiro.realm.UserPassRealm">
        <!-- 凭证匹配器 其中有关于加密算法和加密次数等重要信息 -->
        <property name="credentialsMatcher" ref="retryLimitHashedCredentialsMatcher"/>
        <property name="cachingEnabled" value="true" />
        <property name="authenticationCachingEnabled" value="true" />
        <property name="authenticationCacheName" value="authenticationCache" />
        <property name="authorizationCachingEnabled" value="true" />
        <property name="authorizationCacheName" value="authorizationCache" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="retryLimitHashedCredentialsMatcher"
          class="com.bobomico.shiro.matcher.RetryLimitHashedCredentialsMatcher">
        <constructor-arg index="0">
            <ref bean="userStatusSubject"/>
        </constructor-arg>
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="1" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>

    <!-- Session管理器 -->
    <!-- shiro提供了完整的会话管理功能，不依赖底层容器，JavaSE应用和JavaEE应用都可以使用。
            会话管理器管理着应用中所有Subject的会话，包括会话的创建、维护、删除、失效、验证等工作。-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 定义的是全局的session会话超时时间 此操作会覆盖web.xml文件中的超时时间配置 1800000为30分钟 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除所有无效的Session对象 此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>

    <!-- Session定时调度器 以让无效的session释放 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler2">
        <property name="sessionValidationInterval" value="1000000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- sessionDAO -->
    <!-- 随后需要定义有一个sessionDAO，指的是你的session需要缓存的位置，本次暂时将所有的会话数据保存在内存里面。
         默认会话缓存处理：org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO -->
    <bean id = "sessionDAO" class = "com.bobomico.shiro.cachemanager2.sessionmanager.CustomShiroSessionDao">
        <!-- sessionId生成器 -->
        <property name = "sessionIdGenerator" ref="sessionIdGenerator"/>
        <!-- sessionDAO操作 -->
        <property name = "sessionDAO" ref="jedisIShiroSessionRepositoryImpl"/>
    </bean>

    <!-- sessionID生成器 可自定义 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

    <!-- 缓存管理器 实现了CacheManager -->
    <bean id = "customCacheManager" class ="com.bobomico.shiro.cachemanager2.cachemanager.CustomCacheManager">
        <property name ="shrioCacheManager" ref="redisCacheManagerImpl"/>
    </bean>

    <!-- 现在只是定义了缓存所需要的组件，但是并没有定义session与客户端的之间的联系，
            为了进行有效的session管理所以还需要建立有一个Cookie的操作模版。 -->
    <!-- 配置需要向Cookie中保存数据的配置模版 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID -->
        <constructor-arg name="name" value="BOBOMICO-COOKIE"/>
        <property name="path" value="/"/>
        <!-- 保证该系统不会受到跨域的脚本操作攻击 -->
        <property name="httpOnly" value="true"/>
        <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
        <property name="maxAge" value="-1"/>
        <!-- 修改cookie名字也可以通过以下方式 -->
        <!-- <property name="name" value="JSessionId"/> -->
        <!-- 设置Cookie Domain 默认空，即当前访问的域名 -->
        <!-- <property name="domain" value="sstps.com"></property> -->
        <!-- 设置Cookie的路径，默认空，即种植在域名根下 -->
        <!-- <property name="path" value="cookies"></property> -->
    </bean>

    <!-- todo 即将废弃的方法 -->
    <!-- 缓存用户登录信息 次数和时间 -->
    <bean id="passwordRetryCache" class="com.bobomico.shiro.cache.PasswordRetryCache">
<!--        <constructor-arg index="0">-->
<!--            <ref bean="ehCacheManager" />-->
<!--        </constructor-arg>-->
    </bean>

    <!-- todo 即将废弃的方法 -->
    <!-- 缓存管理器 使用Ehcache实现 该类实现了CacheManager, Initializable, Destroyable -->
<!--    <bean id="ehCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
<!--        <property name="cacheManagerConfigFile" value="classpath:shiro/ehcache.xml" />-->
<!--    </bean>-->

    <!-- 已被废弃的配置 -->
    <!-- 随后需要定义有一个会话的DAO处理，指的是你的会话的缓存位置，本次暂时将所有的会话数据保存在内存里面。
         会话缓存处理：org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO -->
    <!-- 自定义Session DAO -->
    <!--    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">-->
    <!--        &lt;!&ndash; 设置session缓存的名字，这个名字可以任意 &ndash;&gt;-->
    <!--        <property name="activeSessionsCacheName" value="bobomico-activeSession"/>-->
    <!--        &lt;!&ndash; 定义该Session DAO操作中所使用的ID生成器 &ndash;&gt;-->
    <!--        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>-->
    <!--    </bean>-->

    <!-- 请参考部分配置来源 https://blog.csdn.net/u012437781/article/details/78490903 -->
</beans>