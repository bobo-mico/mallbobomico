<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.3.xsd"
       default-autowire="no" >
    <!-- 消除报错 -->
    <context:component-scan base-package="com.bobomico.quartz, com.bobomico.notify"/>

    <!-- 读取属性文件 -->
    <context:property-placeholder location="classpath:quartz/quartz.properties" ignore-unresolvable="true" />

    <!-- 数据源 -->
    <bean name="quartzDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>${org.quartz.dataSource.qzDB.driver}</value>
        </property>
        <property name="url">
            <value>${org.quartz.dataSource.qzDB.URL}</value>
        </property>
        <property name="username">
            <value>${org.quartz.dataSource.qzDB.user}</value>
        </property>
        <property name="password">
            <value>${org.quartz.dataSource.qzDB.password}</value>
        </property>
    </bean>

    <!-- FIXME 配置带参调度器助手 马上可以换掉了 -->
    <bean id="UserScheduler" class="com.bobomico.quartz.scheduler.UserStatusScheduler">
        <constructor-arg ref="userStatusSubject" />
    </bean>

    <!-- 第三元素 -->
    <!-- 调度器 -->
    <bean name="micoScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--
            是org.springframework.scheduling.quartz.SchedulerFactoryBean这个类中把spring上下文以key/value
            的方式存放在了quartz的上下文中了 可以用applicationContextSchedulerContextKey所定义的key得到对应的
            spring上下文
        -->
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>
        <!--
            允许覆盖
            可选 如 overWriteExistingJobs 设置为 false(默认为 false)，则碰到新的 quartz_job.xml
            文件中有与现有调度器中同名的 jobDetail 则不覆盖 这就会出现只改了job 的 cron 表达式而不能重新生效的情况
            在持久化化境下 quratz启动将扫描数据库并加载数据库的job 此时配置文件的修改就不起作用了
            把 overWriteExistingJobs 设置为 true 就可以避免出现这种情况，可随时修改 job.xml 动态调整执行计划
        -->
        <property name="overwriteExistingJobs" value="true"/>
        <!-- 必须 QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
        <property name="startupDelay" value="2" />
        <!-- 必须 数据源 -->
        <property name="dataSource" ref="quartzDataSource"/>
        <!-- 可选 覆盖原有的配置文件 -->
        <property name="configLocation" value="classpath:quartz/quartz.properties"/>
        <!-- 重要 customJobFactory 是为了解决Spring quartz Job不能依赖注入。 -->
        <property name="jobFactory" ref="myJobFactory"/>
        <!-- 绑定 JobDetails -->
        <property name="jobDetails">
            <list>
                <!--<ref bean="unlockJobDetail" />-->
                <!--<ref bean="JobDetail" />-->
            </list>
        </property>
        <!-- 绑定Trigger -->
        <property name="triggers">
            <list>
                <!--<ref bean="CronTrigger"/>-->
                <!--<ref bean="definedInXMLcronTrigger"/>-->
            </list>
        </property>
    </bean>

    <!-- 第一元素 第一种配置方式 简单实用 但是功能有限 -->
    <!--<bean id="unlockJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="unlockJob" />-->
        <!--<property name="targetMethod" value="printMessage" />-->
    <!--</bean>-->

    <!-- Simple触发器 -->
    <!-- 距离当前时间1秒之后执行，之后每隔两秒钟执行一次 -->
    <!--<bean id="unlockTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
        <!--<property name="jobDetail"  ref="unlockJobDetail"/>-->
        <!--&lt;!&ndash; 启动时间 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="startDelay"  value="1000"/>&ndash;&gt;-->
        <!--&lt;!&ndash; 重复策略 &ndash;&gt;-->
        <!--&lt;!&ndash;<property name="repeatInterval"  value="2000"/>&ndash;&gt;-->
    <!--</bean>-->

    <!--
         第一元素 JobDetail也被称为Job实例
         第二种配置方式 可选参数更多 功能强大
         Job实例要到该执行它们的时候才会实例化出来。每次Job被执行，一个新的Job实例会被创建。
         其中暗含的意思就是你的Job不必担心线程安全性，因为同一时刻仅有一个线程去执行给定Job类的实例，
         甚至是并发执行同一Job也是如此。
         https://www.cnblogs.com/mengrennwpu/p/7141986.html?utm_source=itdadao&utm_medium=referral

         durability – 持久性，如果 Job 是非持久性的，那么执行完 Job 后，如果没有任何活动的 Trigger 与之关联，
         那么将会被调度器自动删除。换句话说，非持久性的 Job 的生命周期与它关联的 Trigger 相关。
         requestsRecovery – 如果任务设置了 RequestsRecovery，那么它在调度器发生硬停止（例如，当前进程 crash，或者机器宕机）后，
         当调度器再次启动的时候将会重新执行。这种情况下，JobExecutionContext.isRecovering() 方法将会返回 true。
         https://blog.csdn.net/wjacketcn/article/details/51133098
    -->
    <bean id="JobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <!-- 非空 定义任务 -->
        <property name="jobClass" value="com.bobomico.quartz.job.impl.UnlockJob" />
        <!-- 非空 定义任务名 -->
        <property name="name" value="unlockJob" />
        <!-- 非空 定义任务所在组名 -->
        <property name="group" value="userLoginGroup" />
        <!-- 可选 设置该任务是否具有持久性 注意不是持久化 当执行完就删除 不用保留 -->
        <property name="durability" value="false" />
        <!-- 可选 设置该任务是否中断后可恢复 恢复调度现场 -->
        <property name="requestsRecovery" value="true" />
        <!-- 可选 设置jobDataMap @PersistJobDataAfterExecution注解 将影响该属性的行为 -->
        <!--<property name="jobDataMap">-->
            <!--<map>-->
                <!--<entry key="LoginUser" value-ref="UserLoginVO"/>-->
            <!--</map>-->
        <!--</property>-->
    </bean>

    <!-- Cron触发器 -->
    <bean id="CronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!-- 非空 在此处定义trigger name -->
        <property name="name" value="unlockTrigger" />
        <!-- 非空 在此处定义trigger group name -->
        <property name="group" value="userLoginGroup" />
        <!-- 与jobDetail绑定 -->
        <property name="jobDetail" ref="JobDetail" />
        <!-- 非空 在此处定义定时任务时间 -->
        <property name="cronExpression" value="0/3 * * * * ? *" />    <!-- http://cron.qqe2.com/ -->
        <!-- 非空 在此处定义市区 -->
        <!--<property name="timeZone" ref="timeZone4Job" />-->
        <!--<property name="misfireInstruction" value="1" />-->
        <!--<property name="startDelay"  value="1000"/>-->
    </bean>

    <!-- 时区 -->
    <bean id ="timeZone4Job" class="java.util.TimeZone" factory-method="getTimeZone">
        <constructor-arg value="GMT+8:00" type="java.lang.String"/> <!-- https://www.cnblogs.com/seasonsluo/p/5651098.html -->
    </bean>

</beans>