# Default Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.
# https://blog.csdn.net/github_36429631/article/details/63254055
# Quartz的配置信息主要包括以下三个方面
# 1)集群信息
# 2)调度器线程池
# 3)任务调度现场数据的保存

#============================================================================
# Configure Main Scheduler Properties 主调度器配置
# 任务调度器配置说明 第一部分只需设置两个属性
#  设置调度器的实例名(instanceName) 可以是你喜欢的任何字符串 它用来在用到多个调度器区分特定的调度器实例 多个调度器通常用在集群环境中

#  实例ID(instanceId) instaneName属性一样 instanceId属性也允许任何字符串 这个值必须是在所有调度器实例中是唯一的 尤其是在一个集群当中
#                    假如你想Quartz帮你生成这个值的话 可以设置为AUTO
#                    如果Quartz框架是运行在非集群环境中 那么自动产生的值将会是NON_CLUSTERED
#                    假如是在集群环境下使用Quartz这个值将会是主机名加上当前的日期和时间
#                    大多情况下设置为AUTO即可
#
#  跳过更新检查(skipUpdateCheck)
#============================================================================
org.quartz.scheduler.instanceName:quartzScheduler
org.quartz.scheduler.instanceId:AUTO
org.quartz.scheduler.rmi.export:false
org.quartz.scheduler.rmi.proxy:false
org.quartz.scheduler.wrapJobExecutionInUserTransaction:false
org.quartz.scheduler.skipUpdateCheck:true

#============================================================================
# Configure ThreadPool 线程池
#  这些线程在Quartz中是运行在后台担当重任的
#  线程数量(threadCount) 属性控制了多少个工作者线程被创建用来处理Job
#                       原则上是要处理的Job越多 那么需要的工作者线程也就越多
#                       threadCount的数值至少为1
#                       Quartz没有限定你设置工作者线程的最大值
#                       但是在多数机器上设置该值超过100的话就会显得相当不实用了
#                       特别是在你的Job执行时间较长的情况下
#                       这项没有默认值所以你必须为这个属性设定一个值
#
#  线程优先级(threadPriority) 属性设置工作者线程的优先级 优先级别高的线程比级别低的线程更优先得到执行
#                           该属性的最大值是常量java.lang.Thread.MAX_PRIORITY 等于10
#                           最小值为常量java.lang.Thread.MIN_PRIORITY 为1
#                           这个属性的正常值是 Thread.NORM_PRIORITY 为5
#                           大多情况下把它设置为5 这也是没指定该属性的默认值
#
#  线程池处理器(threadPool) 这个值是一个实现了org.quartz.spi.ThreadPool接口的类的全限名称
#                         Quartz自带的线程池实现类是org.quartz.smpl.SimpleThreadPool
#                         它能够满足大多数用户的需求 这个线程池实现具备简单的行为 并经很好的测试过
#                         它在调度器的生命周期中提供固定大小的线程池 你能根据需求创建自己的线程池实现
#                         如果你想要一个随需可伸缩的线程池时也许需要这么做 这个属性没有默认值 你必须为其指定值
#============================================================================
org.quartz.threadPool.class:org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount:10
org.quartz.threadPool.threadPriority:5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread:true
org.quartz.jobStore.misfireThreshold:60000

#============================================================================
# Configure JobStore 作业存储设置
#  quartz默认的是将job信息存储在内存中 RAMJobStore
#  而集群必须将job信息持久化到数据库中
#  org.quartz.jobStore.class 是指quartz的持久化用数据库来保存
#  org.quartz.jobStore.driverDelegateClass 是根据选择的数据库类型不同而不同 我们是mysql 所以用StdJDBC
#  org.quartz.jobStore.useProperties 使用自己的配置文件
#============================================================================
org.quartz.jobStore.class:org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass:org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.useProperties:false

#============================================================================
# havent cluster spring 集群配置
#  是否集群(isClustered) 属性为true，通知Scheduler实例要它参与到一个集群当中
#
#  检索间隔(clusterCheckinInterval) 属性定义了Scheduler实例检入到数据库中的频率(单位：毫秒)。
#                                  Scheduler 检查是否其他的实例到了它们应当检入的时候未检入 并能更新自身的状态记录
#                                  这能指出一个失败的Scheduler 实例，且当前Scheduler 会以此来接管任何执行失败并可恢复的Job
#                                  通过检入操作 Scheduler也会更新自身的状态记录
#                                  clusterChedkinInterval越小 Scheduler节点检查失败的Scheduler实例就越频繁
#                                  默认值是 20000 (即20秒)
#============================================================================
org.quartz.jobStore.isClustered:true
org.quartz.jobStore.clusterCheckinInterval=20000

#============================================================================
# 数据库配置
#  表前缀(tablePrefix)
#  数据源(dataSource)
#============================================================================
org.quartz.jobStore.tablePrefix:qrtz_
org.quartz.jobStore.dataSource:bobomico

#============================================================================
# Configure Datasources JDBC驱动
# Configure Datasources JDBC驱动
# 如果不想让quartz连接数据库 可以让Sping去管理dataSource 那这里就不要配置数据源信息
#============================================================================
org.quartz.dataSource.qzDB.driver:com.mysql.jdbc.Driver
org.quartz.dataSource.qzDB.URL:jdbc:mysql://localhost:3306/bobomico?characterEncoding=utf-8
org.quartz.dataSource.qzDB.user:root
org.quartz.dataSource.qzDB.password:123456
org.quartz.dataSource.qzDB.maxConnection:10

#============================================================================
# 重要 替换连接池类
#============================================================================
org.quartz.dataSource.qzDB.connectionProvider.class:com.bobomico.quartz.connection.DruidConnectionProvider

#============================================================================
# Configure Plugins 插件配置
#============================================================================
#org.quartz.plugin.triggerHistory.class:org.quartz.plugins.history.LoggingJobHistoryPlugin
#org.quartz.plugin.jobInitializer.class:org.quartz.plugins.xml.JobInitializationPlugin
#org.quartz.plugin.jobInitializer.fileName:quartz_jobs.xml
#org.quartz.plugin.jobInitializer.failOnFileNotFound:true
#
#org.quartz.plugin.jobInitializer.scanInterval:5
#org.quartz.plugin.jobInitializer.overWriteExistingJobs:true